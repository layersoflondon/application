require 'csv'
namespace :import do
  namespace :datasets do
    desc "Import LMA housing records and associated images"
    task :lma_housing, [:excel_file, :images_path] => :environment do |t, args|
      unless args[:excel_file].present? && args[:images_path].present?
        puts <<~EOM
          You need to pass 2 args into this importer: excel file, images path to associate the records to like this:

          rake import:datasets:lma_housing[excel_file.xlsx,./images]
                
          Paths can be relative. Note, no spaces between args, just commas
        EOM
      end

      # parse the excel file.
      workbook = RubyXL::Parser.parse(File.expand_path(args[:excel_file]))
      worksheet = workbook[0]
      rows = worksheet.collect {|row| row && row.cells.collect {|c| c.try(:value)}}
      headers = rows[0]

      # Create or get the user
      user = User.find_by(email: 'jane.muncaster@cityoflondon.gov.uk')

      #   Create the team
      team = Team.find_or_create_by(name: "London Metropolitan Archives")
      team.leaders << user unless team.leader_users.include?(user)

      #   Find or create the collection
      #
      collection = team.collections.find_or_initialize_by(title: "Housing London: London County Council Collections")
      # set read state and write state
      collection.public_read!
      collection.team!
      collection_description = <<~EOM
        About the ‘Housing London’ collection
        
        ‘Housing London’ is a curated collection of photographs of 130 London County Council housing developments. The majority of the photographs focus on estates in inner London, following the boundaries of the Metropolitan Boroughs. The images reveal the diversity of housing design over the period, showing the newly-built estates in their prime. They also capture the broader vision of the architects and planners, including views of shopping parades, community halls, landscaped grounds, specially-commissioned artworks and a glimpse inside residents’ homes. In addition, the collection features several photographs of areas before they were developed, as well as photographs of estates under construction.
        
        About the London County Council (LCC) 
        
        From 1889 to 1965, London County Council (LCC) was the top-level authority for the area destined to become Greater London.  It was arguably the most important elected authority in the country and co-ordinated, funded and directly provided a staggering range of services to people who lived in London and to the many millions who passed through the capital for work or pleasure. 

      EOM
      collection.description = ActionController::Base.helpers.simple_format(ActionController::Base.helpers.strip_tags(collection_description))
      collection.save

      # the headers are as follows:
      # ["No. ", "Collage Record No.", "Metropolitan Borough (pre-1965)", "Title", "Description", "Extra links (hyperlink underlined in text)", "Estate name link to image group search on COLLAGE", "Image (Content) Date", "COLLAGE link", "Catalogue No. (HIDE) ", "Geo-location (lat)", "Geo-location (long)", "LMA Website Link ", "Text for LMA Website Link"]
      # 
      rows[1..-1].each do |row|
        number, catalogue_number, collage_record_id, borough, lat, lng, date, created_by, title, description, extra_link_1, extra_link_1_title, estate_name_link, estate_name_link_title, extra_link_2, extra_link_2_title, extra_link_3, extra_link_3_title, extra_link_4, extra_link_4_title, lma_link, lma_link_title = *row
        # pull out the string portion of a date
        date = date.to_s.match(/\d+/).try(:[], 0)
        next unless date.present?

        begin
          title = ActionController::Base.helpers.strip_tags(title)
          if collection.records.find_by(title: title).present?
            puts "Skipping\n\n"
            next
          end

          puts "Importing #{title}"

          record = Record.new({
                                state: "published",
                                title: ActionController::Base.helpers.strip_tags(title),
                                description: ActionController::Base.helpers.simple_format(ActionController::Base.helpers.strip_tags(description)),
                                lat: lat,
                                lng: lng,
                                credit: "London Metropolitan Archives (City of London Corporation): https://www.cityoflondon.gov.uk/things-to-do/london-metropolitan-archives/Pages/default.aspx",
                                date_from: Date.parse("#{date}-01-01"),
                                autogenerated_date_from_fields: [:date, :month],
                                user: user
                              })


          image = record.attachments.build(attachment_type: 'image', credit: 'London Metropolitan Archives (City of London Corporation)', attachable_attributes: {
            title: record.title
          })
          file_path = File.join(File.expand_path(args[:images_path]), "London Met Archives #{catalogue_number}.jpg")
          image.attachable.file.attach(io: StringIO.new(File.open(file_path).read), filename: "#{catalogue_number}.jpg")
          image.attachable.caption = ""
          record.save!
          record.update_attribute(:primary_image_id, image.attachable.id)

          extra_links = [extra_link_1, extra_link_1_title, extra_link_2, extra_link_2_title, extra_link_3, extra_link_3_title, extra_link_4, extra_link_4_title].each_slice(2).to_a.reject{|el| el.all?(nil)}
          extra_links.each do |link, title|
            if link.match(/youtube/i)
              #   we're creating a video attachment
              video = record.attachments.build(attachment_type: 'video', credit: "", attachable_attributes: {
                title: record.title
              })
              video.attachable.youtube_id = YoutubeID.from(link)
            else
              #   we're creating a normal link
              record.attachments.create(attachment_type: 'url', attachable_attributes: {
                title: (title || link),
                url: link
              })
            end
          end

          if estate_name_link.present?
            record.attachments.create(attachment_type: 'url', attachable_attributes: {
              title: "#{CGI.unescape(estate_name_link.strip.split("q=").last).titleize} on COLLAGE, the London picture archive",
              url: estate_name_link.strip
            })
          end

          if lma_link.present? && lma_link_title.present?
            record.attachments.create(attachment_type: 'url', attachable_attributes: {
              title: lma_link_title.strip,
              url: lma_link.strip
            })
          end

          unless collection.records.include?(record)
            CollectionRecord.create(collection_id: collection.id, record_id: record.id, contributing_user_id: user.id)
          end

          record.save!
          collection.save
        rescue => e
          puts e
          next
        end
      end



      collection.save!


    end
  end
end
