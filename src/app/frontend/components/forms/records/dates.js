import React,{Component} from 'react';
import RecordFormComponentState from './record_form_component_state';
import {observer} from 'mobx-react';
import ErrorBoundary from '../../error_boundary';

@observer class Dates extends Component {
  constructor(props) {
    super(props);

    this.state = {date_to_visible: !!this.props.recordFormStore.record.date_to};
  }

  handleOnDateChange(event) {
    let date_object = {...this.props.recordFormStore.record[event.target.dataset.dateField]};
    date_object[event.target.dataset.dateAttributeName] = event.target.value;

    // remove the field being updated from the list of autogenerated fields, otherwise the value of the field stays at ""
    const autoGeneratedFieldListName = `autogenerated_${event.target.dataset.dateGroup}_fields`;
    this.props.recordFormStore.record[autoGeneratedFieldListName] = this.props.recordFormStore.record[autoGeneratedFieldListName].filter((field) => {return field !== event.target.dataset.dateAttributeName});

    this.props.recordFormStore.record[event.target.dataset.dateField] = date_object;
  }

  handleShowEndDateOnClick(event) {
    this.setState({date_to_visible: !this.state.date_to_visible});
  }

  render() {
    const dateFromLabelClassName = !!this.props.recordFormStore.record.errors_on_publishing['date_from'] ? "errors-on-publish" : "";
    const dateToLabelClassName = !!this.props.recordFormStore.record.errors_on_publishing['date_to'] ? "errors-on-publish" : "";
    return (
      <ErrorBoundary>
      <div className="form-group form-group--date">
        <div className="start-date">
          <label className={dateFromLabelClassName}>When did this happen?</label>
            <div className="date-input-wrap">
              <input placeholder="Day"
                     type="text"
                     pattern="[0-9]*"
                     inputMode="numeric"
                     name="date_from_day"
                     data-date-field="date_from_object"
                     data-date-attribute-name="date"
                     data-date-group="date_from"
                     value={(this.props.recordFormStore.record.autogenerated_date_from_parts.date ? "" : this.props.recordFormStore.record.date_from_object.date)}
                     onChange={this.handleOnDateChange.bind(this)} onBlur={this.handleOnBlur}
              />
              <input placeholder="Month"
                     type="text"
                     pattern="[0-9]*"
                     inputMode="numeric"
                     name="date_from_month"
                     data-date-field="date_from_object"
                     data-date-attribute-name="month"
                     data-date-group="date_from"
                     value={(this.props.recordFormStore.record.autogenerated_date_from_parts.month ? "" : this.props.recordFormStore.record.date_from_object.month)}
                     onChange={this.handleOnDateChange.bind(this)}
                     onBlur={this.handleOnBlur}
              />
              <input placeholder="Year"
                     type="text"
                     pattern="[0-9]*"
                     inputMode="numeric"
                     name="date_from_year"
                     data-date-field="date_from_object"
                     data-date-attribute-name="year"
                     data-date-group="date_from"
                     value={(this.props.recordFormStore.record.autogenerated_date_from_parts.year ? "" : this.props.recordFormStore.record.date_from_object.year)}
                     onChange={this.handleOnDateChange.bind(this)}
                     onBlur={this.handleOnBlur}
              />
            </div>
          <span className="helper-text">You can just enter the year, or year and month. An estimate is ok - an exact date is fantastic!</span>
        </div>

        {!this.state.date_to_visible && (
          <div className="end-date-link">
            <a href="#" onClick={this.handleShowEndDateOnClick.bind(this)}>Can you add an end date?</a> Useful for events, and places that may no longer exist.
          </div>
        )}

        {this.state.date_to_visible && (
          <div className="end-date">
            <label onClick={this.handleShowEndDateOnClick.bind(this)} className={dateToLabelClassName}>When did this end?</label>
            <div>
              <input placeholder="Day"
                     type="text"
                     pattern="[0-9]*"
                     inputMode="numeric"
                     name="date_to_day"
                     data-date-field="date_to_object"
                     data-date-attribute-name="date"
                     data-date-group="date_to"
                     value={(this.props.recordFormStore.record.autogenerated_date_to_parts.date ? "" : this.props.recordFormStore.record.date_to_object.date)}
                     onChange={this.handleOnDateChange.bind(this)} 
                     onBlur={this.handleOnBlur}
              />
              <input placeholder="Month"
                     type="text"
                     pattern="[0-9]*"
                     inputMode="numeric"
                     name="date_to_month"
                     data-date-field="date_to_object"
                     data-date-attribute-name="month"
                     data-date-group="date_to"
                     value={(this.props.recordFormStore.record.autogenerated_date_to_parts.month ? "" : this.props.recordFormStore.record.date_to_object.month)}
                     onChange={this.handleOnDateChange.bind(this)}
                     onBlur={this.handleOnBlur}
              />
              <input placeholder="Year"
                     type="text"
                     pattern="[0-9]*"
                     inputMode="numeric"
                     name="date_to_year"
                     data-date-field="date_to_object"
                     data-date-attribute-name="year"
                     data-date-group="date_to"
                     value={(this.props.recordFormStore.record.autogenerated_date_to_parts.year ? "" : this.props.recordFormStore.record.date_to_object.year)}
                     onChange={this.handleOnDateChange.bind(this)}
                     onBlur={this.handleOnBlur}
              />
            </div>
          </div>
        )}
      </div>
      </ErrorBoundary>
    );
  }
}

export default RecordFormComponentState.bindComponent(Dates);
